{"ast":null,"code":"import axios from 'axios'; // Map for localStorage keys\n\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n}; // Map to retrieve localStorage values\n\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error');\n  /**\r\n   * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n   * in our Node app, then update values in localStorage with data from response.\r\n   * @returns {void}\r\n   */\n\n  const refreshToken = async () => {\n    try {\n      // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\n      if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n        console.error('No refresh token available');\n        logout();\n      } // Use `/refresh_token` endpoint from our Node app\n\n\n      const {\n        data\n      } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`); // Update localStorage values\n\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Reload the page for localStorage updates to be reflected\n\n      window.location.reload();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  /**\r\n  * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n  * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n  * @returns {boolean} Whether or not the access token in localStorage has expired\r\n  */\n\n\n  const hasTokenExpired = () => {\n    const {\n      accessToken,\n      timestamp,\n      expireTime\n    } = LOCALSTORAGE_VALUES;\n\n    if (!accessToken || !timestamp) {\n      return false;\n    }\n\n    const millisecondsElapsed = Date.now() - Number(timestamp);\n    return millisecondsElapsed / 1000 > Number(expireTime);\n  }; // If there's an error OR the token in localStorage has expired, refresh the token\n\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  } // If there is a valid access token in localStorage, use that\n\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  } // If there is a token in the URL query params, user is logging in for the first time\n\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    // Store the query params in localStorage\n    for (const property in queryParams) {\n      window.localStorage.setItem(property, queryParams[property]);\n    } // Set timestamp\n\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now()); // Return access token from query params\n\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  } // We should never get here!\n\n\n  return false;\n};\n\nexport const accessToken = getAccessToken();\n/**\r\n* Clear out all localStorage items we've set and reload the page\r\n* @returns {void}\r\n*/\n\nexport const logout = () => {\n  // Clear all localStorage items\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  } // Navigate to homepage\n\n\n  window.location = window.location.origin;\n};\n/**\r\n* Axios global request headers\r\n* https://github.com/axios/axios#global-axios-defaults\r\n*/\n\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json';\n/**\r\n * Get Current User's Profile\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n * @returns {Promise}\r\n */\n// export const fetchData = async () => {\n//     try {\n//       const { data } = await axios.get('/me')\n//       console.log(data)\n//         const fullName = data.display_name\n//         const nameArray = fullName.split(' ')\n//         const firstName = nameArray[0]\n//         // setFirstName(firstName)\n//         // const profPic = data.images[0].url\n//         // setProfilePhoto(profPic)\n//         // setCountry(data.country)\n//         // setUserProfile(prevUser => ({...prevUser, firstName: firstName, profPic: profPic, country: country}))\n//     } catch(e) {\n//       console.error(e);\n//     }\n//     try {\n//       const {data} = await axios.get('/me/top/tracks?limit=5')\n//         //   setTopSongs(data)\n//           console.log(data)\n//           const key = 0\n//           const myAlbumCover = data.items[key].album.images[0].url\n//         //   setAlbumCover(myAlbumCover)\n//         //   const myTrack = data.items[key].name\n//         //   setTopTrack(myTrack)\n//         //   const myArtist = data.items[key].artists[0].name\n//         //   setArtist(myArtist)\n//         //   const preview = data.items[key].preview_url\n//         //   setPreviewUrl(preview)\n//         //   setUserProfile(prevUser => ({...prevUser, topSongs: data})) \n//     }\n//     catch(e) {\n//       console.error(e)\n//     }\n//   }\n\nexport const getCurrentUserProfile = () => axios.get('/me');\nexport const getUserTopTracks = () => axios.get('/me/top/tracks?limit=5');\nexport const getUserTopArtists = () => axios.get('/me/top/artists?limit=1');\nexport const getListeningNow = () => axios.get('me/player/currently-playing');","map":{"version":3,"sources":["C:/Users/Mike/my-app/client/src/spotify.js"],"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getAccessToken","queryString","location","search","urlParams","URLSearchParams","queryParams","get","hasError","Date","now","Number","console","error","logout","data","setItem","access_token","reload","e","hasTokenExpired","millisecondsElapsed","property","removeItem","origin","defaults","baseURL","headers","getCurrentUserProfile","getUserTopTracks","getUserTopArtists","getListeningNow"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\n// Map for localStorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n  }\r\n  \r\n  // Map to retrieve localStorage values\r\n  const LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n  };\r\n\r\nconst getAccessToken = () => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const queryParams = {\r\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n        [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n      };\r\n    const hasError = urlParams.get('error');\r\n\r\n\r\n    \r\n/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */\r\n const refreshToken = async () => {\r\n    try {\r\n      // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n      if (!LOCALSTORAGE_VALUES.refreshToken ||\r\n        LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\r\n        (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\r\n      ) {\r\n        console.error('No refresh token available');\r\n        logout();\r\n      }\r\n  \r\n      // Use `/refresh_token` endpoint from our Node app\r\n      const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\r\n  \r\n      // Update localStorage values\r\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\r\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n  \r\n      // Reload the page for localStorage updates to be reflected\r\n      window.location.reload();\r\n  \r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n    /**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */\r\n const hasTokenExpired = () => {\r\n    const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\r\n    if (!accessToken || !timestamp) {\r\n      return false;\r\n    }\r\n    const millisecondsElapsed = Date.now() - Number(timestamp);\r\n    return (millisecondsElapsed / 1000) > Number(expireTime);\r\n  }\r\n\r\n  // If there's an error OR the token in localStorage has expired, refresh the token\r\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n    refreshToken();\r\n  }\r\n\r\n  // If there is a valid access token in localStorage, use that\r\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n    return LOCALSTORAGE_VALUES.accessToken;\r\n  }\r\n  // If there is a token in the URL query params, user is logging in for the first time\r\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n    // Store the query params in localStorage\r\n    for (const property in queryParams) {\r\n      window.localStorage.setItem(property, queryParams[property]);\r\n    }\r\n    // Set timestamp\r\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n    // Return access token from query params\r\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\r\n  }\r\n\r\n  // We should never get here!\r\n  return false\r\n}\r\n\r\nexport const accessToken = getAccessToken()\r\n\r\n  /**\r\n * Clear out all localStorage items we've set and reload the page\r\n * @returns {void}\r\n */\r\n   export const logout = () => {\r\n    // Clear all localStorage items\r\n    for (const property in LOCALSTORAGE_KEYS) {\r\n      window.localStorage.removeItem(LOCALSTORAGE_KEYS[property])\r\n    }\r\n    // Navigate to homepage\r\n    window.location = window.location.origin;\r\n  }\r\n\r\n\r\n  /**\r\n * Axios global request headers\r\n * https://github.com/axios/axios#global-axios-defaults\r\n */\r\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\r\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\naxios.defaults.headers['Content-Type'] = 'application/json';\r\n\r\n/**\r\n * Get Current User's Profile\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n * @returns {Promise}\r\n */\r\n\r\n\r\n// export const fetchData = async () => {\r\n//     try {\r\n//       const { data } = await axios.get('/me')\r\n//       console.log(data)\r\n//         const fullName = data.display_name\r\n//         const nameArray = fullName.split(' ')\r\n//         const firstName = nameArray[0]\r\n//         // setFirstName(firstName)\r\n//         // const profPic = data.images[0].url\r\n//         // setProfilePhoto(profPic)\r\n//         // setCountry(data.country)\r\n//         // setUserProfile(prevUser => ({...prevUser, firstName: firstName, profPic: profPic, country: country}))\r\n//     } catch(e) {\r\n//       console.error(e);\r\n//     }\r\n\r\n//     try {\r\n//       const {data} = await axios.get('/me/top/tracks?limit=5')\r\n//         //   setTopSongs(data)\r\n//           console.log(data)\r\n//           const key = 0\r\n//           const myAlbumCover = data.items[key].album.images[0].url\r\n//         //   setAlbumCover(myAlbumCover)\r\n//         //   const myTrack = data.items[key].name\r\n//         //   setTopTrack(myTrack)\r\n//         //   const myArtist = data.items[key].artists[0].name\r\n//         //   setArtist(myArtist)\r\n//         //   const preview = data.items[key].preview_url\r\n//         //   setPreviewUrl(preview)\r\n//         //   setUserProfile(prevUser => ({...prevUser, topSongs: data})) \r\n//     }\r\n//     catch(e) {\r\n//       console.error(e)\r\n//     }\r\n//   }\r\nexport const getCurrentUserProfile = () => axios.get('/me');\r\n\r\nexport const getUserTopTracks = () => axios.get('/me/top/tracks?limit=5')\r\nexport const getUserTopArtists = () => axios.get('/me/top/artists?limit=1')\r\nexport const getListeningNow = () => axios.get('me/player/currently-playing')\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}