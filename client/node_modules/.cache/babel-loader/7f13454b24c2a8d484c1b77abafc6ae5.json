{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\Mike\\\\my-app\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _defineProperty from\"C:\\\\Users\\\\Mike\\\\my-app\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\defineProperty.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Mike\\\\my-app\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import axios from'axios';// Map for localStorage keys\nvar LOCALSTORAGE_KEYS={accessToken:'spotify_access_token',refreshToken:'spotify_refresh_token',expireTime:'spotify_token_expire_time',timestamp:'spotify_token_timestamp'};// Map to retrieve localStorage values\nvar LOCALSTORAGE_VALUES={accessToken:window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),refreshToken:window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),expireTime:window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),timestamp:window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)};var getAccessToken=function getAccessToken(){var _queryParams;var queryString=window.location.search;var urlParams=new URLSearchParams(queryString);var queryParams=(_queryParams={},_defineProperty(_queryParams,LOCALSTORAGE_KEYS.accessToken,urlParams.get('access_token')),_defineProperty(_queryParams,LOCALSTORAGE_KEYS.refreshToken,urlParams.get('refresh_token')),_defineProperty(_queryParams,LOCALSTORAGE_KEYS.expireTime,urlParams.get('expires_in')),_queryParams);var hasError=urlParams.get('error');/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */var refreshToken=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$axios$get,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;// Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\nif(!LOCALSTORAGE_VALUES.refreshToken||LOCALSTORAGE_VALUES.refreshToken==='undefined'||Date.now()-Number(LOCALSTORAGE_VALUES.timestamp)/1000<1000){console.error('No refresh token available');logout();}// Use `/refresh_token` endpoint from our Node app\n_context.next=4;return axios.get(\"/refresh_token?refresh_token=\".concat(LOCALSTORAGE_VALUES.refreshToken));case 4:_yield$axios$get=_context.sent;data=_yield$axios$get.data;// Update localStorage values\nwindow.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken,data.access_token);window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp,Date.now());// Reload the page for localStorage updates to be reflected\nwindow.location.reload();_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return function refreshToken(){return _ref.apply(this,arguments);};}();/**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */var hasTokenExpired=function hasTokenExpired(){var accessToken=LOCALSTORAGE_VALUES.accessToken,timestamp=LOCALSTORAGE_VALUES.timestamp,expireTime=LOCALSTORAGE_VALUES.expireTime;if(!accessToken||!timestamp){return false;}var millisecondsElapsed=Date.now()-Number(timestamp);return millisecondsElapsed/1000>Number(expireTime);};// If there's an error OR the token in localStorage has expired, refresh the token\nif(hasError||hasTokenExpired()||LOCALSTORAGE_VALUES.accessToken==='undefined'){refreshToken();}// If there is a valid access token in localStorage, use that\nif(LOCALSTORAGE_VALUES.accessToken&&LOCALSTORAGE_VALUES.accessToken!=='undefined'){return LOCALSTORAGE_VALUES.accessToken;}// If there is a token in the URL query params, user is logging in for the first time\nif(queryParams[LOCALSTORAGE_KEYS.accessToken]){// Store the query params in localStorage\nfor(var property in queryParams){window.localStorage.setItem(property,queryParams[property]);}// Set timestamp\nwindow.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp,Date.now());// Return access token from query params\nreturn queryParams[LOCALSTORAGE_KEYS.accessToken];}// We should never get here!\nreturn false;};export var accessToken=getAccessToken();/**\r\n * Clear out all localStorage items we've set and reload the page\r\n * @returns {void}\r\n */export var logout=function logout(){// Clear all localStorage items\nfor(var property in LOCALSTORAGE_KEYS){window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);}// Navigate to homepage\nwindow.location=window.location.origin;};/**\r\n * Axios global request headers\r\n * https://github.com/axios/axios#global-axios-defaults\r\n */axios.defaults.baseURL='https://api.spotify.com/v1';axios.defaults.headers['Authorization']=\"Bearer \".concat(accessToken);axios.defaults.headers['Content-Type']='application/json';/**\r\n * Get Current User's Profile\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n * @returns {Promise}\r\n */ // export const fetchData = async () => {\n//     try {\n//       const { data } = await axios.get('/me')\n//       console.log(data)\n//         const fullName = data.display_name\n//         const nameArray = fullName.split(' ')\n//         const firstName = nameArray[0]\n//         // setFirstName(firstName)\n//         // const profPic = data.images[0].url\n//         // setProfilePhoto(profPic)\n//         // setCountry(data.country)\n//         // setUserProfile(prevUser => ({...prevUser, firstName: firstName, profPic: profPic, country: country}))\n//     } catch(e) {\n//       console.error(e);\n//     }\n//     try {\n//       const {data} = await axios.get('/me/top/tracks?limit=5')\n//         //   setTopSongs(data)\n//           console.log(data)\n//           const key = 0\n//           const myAlbumCover = data.items[key].album.images[0].url\n//         //   setAlbumCover(myAlbumCover)\n//         //   const myTrack = data.items[key].name\n//         //   setTopTrack(myTrack)\n//         //   const myArtist = data.items[key].artists[0].name\n//         //   setArtist(myArtist)\n//         //   const preview = data.items[key].preview_url\n//         //   setPreviewUrl(preview)\n//         //   setUserProfile(prevUser => ({...prevUser, topSongs: data})) \n//     }\n//     catch(e) {\n//       console.error(e)\n//     }\n//   }\nexport var getCurrentUserProfile=function getCurrentUserProfile(){return axios.get('/me');};export var getUserTopTracks=function getUserTopTracks(){return axios.get('/me/top/tracks?limit=5');};export var getUserTopArtists=function getUserTopArtists(){return axios.get('/me/top/artists?limit=1');};export var getListeningNow=function getListeningNow(){return axios.get('me/player/currently-playing');};","map":{"version":3,"sources":["C:/Users/Mike/my-app/client/src/spotify.js"],"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","getAccessToken","queryString","location","search","urlParams","URLSearchParams","queryParams","get","hasError","Date","now","Number","console","error","logout","data","setItem","access_token","reload","hasTokenExpired","millisecondsElapsed","property","removeItem","origin","defaults","baseURL","headers","getCurrentUserProfile","getUserTopTracks","getUserTopArtists","getListeningNow"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\n// Map for localStorage keys\r\nconst LOCALSTORAGE_KEYS = {\r\n    accessToken: 'spotify_access_token',\r\n    refreshToken: 'spotify_refresh_token',\r\n    expireTime: 'spotify_token_expire_time',\r\n    timestamp: 'spotify_token_timestamp',\r\n  }\r\n  \r\n  // Map to retrieve localStorage values\r\n  const LOCALSTORAGE_VALUES = {\r\n    accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\r\n    refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\r\n    expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\r\n    timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\r\n  };\r\n\r\nconst getAccessToken = () => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const queryParams = {\r\n        [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\r\n        [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\r\n        [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in'),\r\n      };\r\n    const hasError = urlParams.get('error');\r\n\r\n\r\n    \r\n/**\r\n * Use the refresh token in localStorage to hit the /refresh_token endpoint\r\n * in our Node app, then update values in localStorage with data from response.\r\n * @returns {void}\r\n */\r\n const refreshToken = async () => {\r\n    try {\r\n      // Logout if there's no refresh token stored or we've managed to get into a reload infinite loop\r\n      if (!LOCALSTORAGE_VALUES.refreshToken ||\r\n        LOCALSTORAGE_VALUES.refreshToken === 'undefined' ||\r\n        (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000\r\n      ) {\r\n        console.error('No refresh token available');\r\n        logout();\r\n      }\r\n  \r\n      // Use `/refresh_token` endpoint from our Node app\r\n      const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\r\n  \r\n      // Update localStorage values\r\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\r\n      window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n  \r\n      // Reload the page for localStorage updates to be reflected\r\n      window.location.reload();\r\n  \r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n    /**\r\n * Checks if the amount of time that has elapsed between the timestamp in localStorage\r\n * and now is greater than the expiration time of 3600 seconds (1 hour).\r\n * @returns {boolean} Whether or not the access token in localStorage has expired\r\n */\r\n const hasTokenExpired = () => {\r\n    const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES;\r\n    if (!accessToken || !timestamp) {\r\n      return false;\r\n    }\r\n    const millisecondsElapsed = Date.now() - Number(timestamp);\r\n    return (millisecondsElapsed / 1000) > Number(expireTime);\r\n  }\r\n\r\n  // If there's an error OR the token in localStorage has expired, refresh the token\r\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\r\n    refreshToken();\r\n  }\r\n\r\n  // If there is a valid access token in localStorage, use that\r\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\r\n    return LOCALSTORAGE_VALUES.accessToken;\r\n  }\r\n  // If there is a token in the URL query params, user is logging in for the first time\r\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\r\n    // Store the query params in localStorage\r\n    for (const property in queryParams) {\r\n      window.localStorage.setItem(property, queryParams[property]);\r\n    }\r\n    // Set timestamp\r\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\r\n    // Return access token from query params\r\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\r\n  }\r\n\r\n  // We should never get here!\r\n  return false\r\n}\r\n\r\nexport const accessToken = getAccessToken()\r\n\r\n  /**\r\n * Clear out all localStorage items we've set and reload the page\r\n * @returns {void}\r\n */\r\n   export const logout = () => {\r\n    // Clear all localStorage items\r\n    for (const property in LOCALSTORAGE_KEYS) {\r\n      window.localStorage.removeItem(LOCALSTORAGE_KEYS[property])\r\n    }\r\n    // Navigate to homepage\r\n    window.location = window.location.origin;\r\n  }\r\n\r\n\r\n  /**\r\n * Axios global request headers\r\n * https://github.com/axios/axios#global-axios-defaults\r\n */\r\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\r\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\naxios.defaults.headers['Content-Type'] = 'application/json';\r\n\r\n/**\r\n * Get Current User's Profile\r\n * https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile\r\n * @returns {Promise}\r\n */\r\n\r\n\r\n// export const fetchData = async () => {\r\n//     try {\r\n//       const { data } = await axios.get('/me')\r\n//       console.log(data)\r\n//         const fullName = data.display_name\r\n//         const nameArray = fullName.split(' ')\r\n//         const firstName = nameArray[0]\r\n//         // setFirstName(firstName)\r\n//         // const profPic = data.images[0].url\r\n//         // setProfilePhoto(profPic)\r\n//         // setCountry(data.country)\r\n//         // setUserProfile(prevUser => ({...prevUser, firstName: firstName, profPic: profPic, country: country}))\r\n//     } catch(e) {\r\n//       console.error(e);\r\n//     }\r\n\r\n//     try {\r\n//       const {data} = await axios.get('/me/top/tracks?limit=5')\r\n//         //   setTopSongs(data)\r\n//           console.log(data)\r\n//           const key = 0\r\n//           const myAlbumCover = data.items[key].album.images[0].url\r\n//         //   setAlbumCover(myAlbumCover)\r\n//         //   const myTrack = data.items[key].name\r\n//         //   setTopTrack(myTrack)\r\n//         //   const myArtist = data.items[key].artists[0].name\r\n//         //   setArtist(myArtist)\r\n//         //   const preview = data.items[key].preview_url\r\n//         //   setPreviewUrl(preview)\r\n//         //   setUserProfile(prevUser => ({...prevUser, topSongs: data})) \r\n//     }\r\n//     catch(e) {\r\n//       console.error(e)\r\n//     }\r\n//   }\r\nexport const getCurrentUserProfile = () => axios.get('/me');\r\n\r\nexport const getUserTopTracks = () => axios.get('/me/top/tracks?limit=5')\r\nexport const getUserTopArtists = () => axios.get('/me/top/artists?limit=1')\r\nexport const getListeningNow = () => axios.get('me/player/currently-playing')\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}